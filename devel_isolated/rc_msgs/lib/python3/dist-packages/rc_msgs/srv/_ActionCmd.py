# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rc_msgs/ActionCmdRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ActionCmdRequest(genpy.Message):
  _md5sum = "b4bd7dd5ffa8183aba2438b8b00b6371"
  _type = "rc_msgs/ActionCmdRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string action_name
bool updateX_enable
bool updateY_enable
bool updateYaw_enable
bool calibration_enable
bool reset_enable
float64 updateX_data
float64 updateY_data
float64 updateYaw_data
"""
  __slots__ = ['action_name','updateX_enable','updateY_enable','updateYaw_enable','calibration_enable','reset_enable','updateX_data','updateY_data','updateYaw_data']
  _slot_types = ['string','bool','bool','bool','bool','bool','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_name,updateX_enable,updateY_enable,updateYaw_enable,calibration_enable,reset_enable,updateX_data,updateY_data,updateYaw_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionCmdRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_name is None:
        self.action_name = ''
      if self.updateX_enable is None:
        self.updateX_enable = False
      if self.updateY_enable is None:
        self.updateY_enable = False
      if self.updateYaw_enable is None:
        self.updateYaw_enable = False
      if self.calibration_enable is None:
        self.calibration_enable = False
      if self.reset_enable is None:
        self.reset_enable = False
      if self.updateX_data is None:
        self.updateX_data = 0.
      if self.updateY_data is None:
        self.updateY_data = 0.
      if self.updateYaw_data is None:
        self.updateYaw_data = 0.
    else:
      self.action_name = ''
      self.updateX_enable = False
      self.updateY_enable = False
      self.updateYaw_enable = False
      self.calibration_enable = False
      self.reset_enable = False
      self.updateX_data = 0.
      self.updateY_data = 0.
      self.updateYaw_data = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.action_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B3d().pack(_x.updateX_enable, _x.updateY_enable, _x.updateYaw_enable, _x.calibration_enable, _x.reset_enable, _x.updateX_data, _x.updateY_data, _x.updateYaw_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_name = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.updateX_enable, _x.updateY_enable, _x.updateYaw_enable, _x.calibration_enable, _x.reset_enable, _x.updateX_data, _x.updateY_data, _x.updateYaw_data,) = _get_struct_5B3d().unpack(str[start:end])
      self.updateX_enable = bool(self.updateX_enable)
      self.updateY_enable = bool(self.updateY_enable)
      self.updateYaw_enable = bool(self.updateYaw_enable)
      self.calibration_enable = bool(self.calibration_enable)
      self.reset_enable = bool(self.reset_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.action_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_5B3d().pack(_x.updateX_enable, _x.updateY_enable, _x.updateYaw_enable, _x.calibration_enable, _x.reset_enable, _x.updateX_data, _x.updateY_data, _x.updateYaw_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_name = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.updateX_enable, _x.updateY_enable, _x.updateYaw_enable, _x.calibration_enable, _x.reset_enable, _x.updateX_data, _x.updateY_data, _x.updateYaw_data,) = _get_struct_5B3d().unpack(str[start:end])
      self.updateX_enable = bool(self.updateX_enable)
      self.updateY_enable = bool(self.updateY_enable)
      self.updateYaw_enable = bool(self.updateYaw_enable)
      self.calibration_enable = bool(self.calibration_enable)
      self.reset_enable = bool(self.reset_enable)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B3d = None
def _get_struct_5B3d():
    global _struct_5B3d
    if _struct_5B3d is None:
        _struct_5B3d = struct.Struct("<5B3d")
    return _struct_5B3d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rc_msgs/ActionCmdResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ActionCmdResponse(genpy.Message):
  _md5sum = "fa3e942e5cfe76a6a46f20a0780b2cf3"
  _type = "rc_msgs/ActionCmdResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_success

"""
  __slots__ = ['is_success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionCmdResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_success is None:
        self.is_success = False
    else:
      self.is_success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.is_success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.is_success,) = _get_struct_B().unpack(str[start:end])
      self.is_success = bool(self.is_success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.is_success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.is_success,) = _get_struct_B().unpack(str[start:end])
      self.is_success = bool(self.is_success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ActionCmd(object):
  _type          = 'rc_msgs/ActionCmd'
  _md5sum = '903779543030b66caa508cdbd86af033'
  _request_class  = ActionCmdRequest
  _response_class = ActionCmdResponse
