// Generated by gencpp from file rc_msgs/IbusData.msg
// DO NOT EDIT!


#ifndef RC_MSGS_MESSAGE_IBUSDATA_H
#define RC_MSGS_MESSAGE_IBUSDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rc_msgs
{
template <class ContainerAllocator>
struct IbusData_
{
  typedef IbusData_<ContainerAllocator> Type;

  IbusData_()
    : sw_a(0)
    , sw_b(0)
    , sw_c(0)
    , sw_d(0)
    , vr_a(0.0)
    , vr_b(0.0)
    , ch_l_x(0.0)
    , ch_l_y(0.0)
    , ch_r_x(0.0)
    , ch_r_y(0.0)
    , key_l(false)
    , key_r(false)
    , stamp()  {
    }
  IbusData_(const ContainerAllocator& _alloc)
    : sw_a(0)
    , sw_b(0)
    , sw_c(0)
    , sw_d(0)
    , vr_a(0.0)
    , vr_b(0.0)
    , ch_l_x(0.0)
    , ch_l_y(0.0)
    , ch_r_x(0.0)
    , ch_r_y(0.0)
    , key_l(false)
    , key_r(false)
    , stamp()  {
  (void)_alloc;
    }



   typedef uint8_t _sw_a_type;
  _sw_a_type sw_a;

   typedef uint8_t _sw_b_type;
  _sw_b_type sw_b;

   typedef uint8_t _sw_c_type;
  _sw_c_type sw_c;

   typedef uint8_t _sw_d_type;
  _sw_d_type sw_d;

   typedef double _vr_a_type;
  _vr_a_type vr_a;

   typedef double _vr_b_type;
  _vr_b_type vr_b;

   typedef double _ch_l_x_type;
  _ch_l_x_type ch_l_x;

   typedef double _ch_l_y_type;
  _ch_l_y_type ch_l_y;

   typedef double _ch_r_x_type;
  _ch_r_x_type ch_r_x;

   typedef double _ch_r_y_type;
  _ch_r_y_type ch_r_y;

   typedef uint8_t _key_l_type;
  _key_l_type key_l;

   typedef uint8_t _key_r_type;
  _key_r_type key_r;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UP)
  #undef UP
#endif
#if defined(_WIN32) && defined(DOWN)
  #undef DOWN
#endif
#if defined(_WIN32) && defined(MID)
  #undef MID
#endif

  enum {
    UP = 1u,
    DOWN = 2u,
    MID = 3u,
  };


  typedef boost::shared_ptr< ::rc_msgs::IbusData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rc_msgs::IbusData_<ContainerAllocator> const> ConstPtr;

}; // struct IbusData_

typedef ::rc_msgs::IbusData_<std::allocator<void> > IbusData;

typedef boost::shared_ptr< ::rc_msgs::IbusData > IbusDataPtr;
typedef boost::shared_ptr< ::rc_msgs::IbusData const> IbusDataConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rc_msgs::IbusData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rc_msgs::IbusData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rc_msgs::IbusData_<ContainerAllocator1> & lhs, const ::rc_msgs::IbusData_<ContainerAllocator2> & rhs)
{
  return lhs.sw_a == rhs.sw_a &&
    lhs.sw_b == rhs.sw_b &&
    lhs.sw_c == rhs.sw_c &&
    lhs.sw_d == rhs.sw_d &&
    lhs.vr_a == rhs.vr_a &&
    lhs.vr_b == rhs.vr_b &&
    lhs.ch_l_x == rhs.ch_l_x &&
    lhs.ch_l_y == rhs.ch_l_y &&
    lhs.ch_r_x == rhs.ch_r_x &&
    lhs.ch_r_y == rhs.ch_r_y &&
    lhs.key_l == rhs.key_l &&
    lhs.key_r == rhs.key_r &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rc_msgs::IbusData_<ContainerAllocator1> & lhs, const ::rc_msgs::IbusData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::IbusData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::IbusData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::IbusData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::IbusData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::IbusData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::IbusData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rc_msgs::IbusData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "056b88ab8815d7db8205e833088ee03e";
  }

  static const char* value(const ::rc_msgs::IbusData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x056b88ab8815d7dbULL;
  static const uint64_t static_value2 = 0x8205e833088ee03eULL;
};

template<class ContainerAllocator>
struct DataType< ::rc_msgs::IbusData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rc_msgs/IbusData";
  }

  static const char* value(const ::rc_msgs::IbusData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rc_msgs::IbusData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 UP = 1\n"
"uint8 DOWN = 2\n"
"uint8 MID = 3\n"
"\n"
"uint8 sw_a\n"
"uint8 sw_b\n"
"uint8 sw_c\n"
"uint8 sw_d\n"
"\n"
"float64 vr_a\n"
"float64 vr_b\n"
"\n"
"float64 ch_l_x\n"
"float64 ch_l_y\n"
"float64 ch_r_x\n"
"float64 ch_r_y\n"
"\n"
"bool key_l\n"
"bool key_r\n"
"\n"
"time stamp\n"
;
  }

  static const char* value(const ::rc_msgs::IbusData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rc_msgs::IbusData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sw_a);
      stream.next(m.sw_b);
      stream.next(m.sw_c);
      stream.next(m.sw_d);
      stream.next(m.vr_a);
      stream.next(m.vr_b);
      stream.next(m.ch_l_x);
      stream.next(m.ch_l_y);
      stream.next(m.ch_r_x);
      stream.next(m.ch_r_y);
      stream.next(m.key_l);
      stream.next(m.key_r);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IbusData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rc_msgs::IbusData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rc_msgs::IbusData_<ContainerAllocator>& v)
  {
    s << indent << "sw_a: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sw_a);
    s << indent << "sw_b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sw_b);
    s << indent << "sw_c: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sw_c);
    s << indent << "sw_d: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sw_d);
    s << indent << "vr_a: ";
    Printer<double>::stream(s, indent + "  ", v.vr_a);
    s << indent << "vr_b: ";
    Printer<double>::stream(s, indent + "  ", v.vr_b);
    s << indent << "ch_l_x: ";
    Printer<double>::stream(s, indent + "  ", v.ch_l_x);
    s << indent << "ch_l_y: ";
    Printer<double>::stream(s, indent + "  ", v.ch_l_y);
    s << indent << "ch_r_x: ";
    Printer<double>::stream(s, indent + "  ", v.ch_r_x);
    s << indent << "ch_r_y: ";
    Printer<double>::stream(s, indent + "  ", v.ch_r_y);
    s << indent << "key_l: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_l);
    s << indent << "key_r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_r);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RC_MSGS_MESSAGE_IBUSDATA_H
