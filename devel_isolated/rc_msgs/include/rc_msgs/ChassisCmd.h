// Generated by gencpp from file rc_msgs/ChassisCmd.msg
// DO NOT EDIT!


#ifndef RC_MSGS_MESSAGE_CHASSISCMD_H
#define RC_MSGS_MESSAGE_CHASSISCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Accel.h>

namespace rc_msgs
{
template <class ContainerAllocator>
struct ChassisCmd_
{
  typedef ChassisCmd_<ContainerAllocator> Type;

  ChassisCmd_()
    : accel()
    , command_source_frame()
    , stamp()  {
    }
  ChassisCmd_(const ContainerAllocator& _alloc)
    : accel(_alloc)
    , command_source_frame(_alloc)
    , stamp()  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Accel_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_source_frame_type;
  _command_source_frame_type command_source_frame;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::rc_msgs::ChassisCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rc_msgs::ChassisCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisCmd_

typedef ::rc_msgs::ChassisCmd_<std::allocator<void> > ChassisCmd;

typedef boost::shared_ptr< ::rc_msgs::ChassisCmd > ChassisCmdPtr;
typedef boost::shared_ptr< ::rc_msgs::ChassisCmd const> ChassisCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rc_msgs::ChassisCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rc_msgs::ChassisCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rc_msgs::ChassisCmd_<ContainerAllocator1> & lhs, const ::rc_msgs::ChassisCmd_<ContainerAllocator2> & rhs)
{
  return lhs.accel == rhs.accel &&
    lhs.command_source_frame == rhs.command_source_frame &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rc_msgs::ChassisCmd_<ContainerAllocator1> & lhs, const ::rc_msgs::ChassisCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::ChassisCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::ChassisCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::ChassisCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::ChassisCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::ChassisCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::ChassisCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rc_msgs::ChassisCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a4c3ac2c507077f490fac95897a32c5";
  }

  static const char* value(const ::rc_msgs::ChassisCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a4c3ac2c507077fULL;
  static const uint64_t static_value2 = 0x490fac95897a32c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rc_msgs::ChassisCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rc_msgs/ChassisCmd";
  }

  static const char* value(const ::rc_msgs::ChassisCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rc_msgs::ChassisCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Accel accel\n"
"string command_source_frame\n"
"time stamp\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rc_msgs::ChassisCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rc_msgs::ChassisCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accel);
      stream.next(m.command_source_frame);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rc_msgs::ChassisCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rc_msgs::ChassisCmd_<ContainerAllocator>& v)
  {
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "command_source_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command_source_frame);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RC_MSGS_MESSAGE_CHASSISCMD_H
