// Generated by gencpp from file rc_msgs/ActionCmdRequest.msg
// DO NOT EDIT!


#ifndef RC_MSGS_MESSAGE_ACTIONCMDREQUEST_H
#define RC_MSGS_MESSAGE_ACTIONCMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rc_msgs
{
template <class ContainerAllocator>
struct ActionCmdRequest_
{
  typedef ActionCmdRequest_<ContainerAllocator> Type;

  ActionCmdRequest_()
    : action_name()
    , updateX_enable(false)
    , updateY_enable(false)
    , updateYaw_enable(false)
    , calibration_enable(false)
    , reset_enable(false)
    , updateX_data(0.0)
    , updateY_data(0.0)
    , updateYaw_data(0.0)  {
    }
  ActionCmdRequest_(const ContainerAllocator& _alloc)
    : action_name(_alloc)
    , updateX_enable(false)
    , updateY_enable(false)
    , updateYaw_enable(false)
    , calibration_enable(false)
    , reset_enable(false)
    , updateX_data(0.0)
    , updateY_data(0.0)
    , updateYaw_data(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_name_type;
  _action_name_type action_name;

   typedef uint8_t _updateX_enable_type;
  _updateX_enable_type updateX_enable;

   typedef uint8_t _updateY_enable_type;
  _updateY_enable_type updateY_enable;

   typedef uint8_t _updateYaw_enable_type;
  _updateYaw_enable_type updateYaw_enable;

   typedef uint8_t _calibration_enable_type;
  _calibration_enable_type calibration_enable;

   typedef uint8_t _reset_enable_type;
  _reset_enable_type reset_enable;

   typedef double _updateX_data_type;
  _updateX_data_type updateX_data;

   typedef double _updateY_data_type;
  _updateY_data_type updateY_data;

   typedef double _updateYaw_data_type;
  _updateYaw_data_type updateYaw_data;





  typedef boost::shared_ptr< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ActionCmdRequest_

typedef ::rc_msgs::ActionCmdRequest_<std::allocator<void> > ActionCmdRequest;

typedef boost::shared_ptr< ::rc_msgs::ActionCmdRequest > ActionCmdRequestPtr;
typedef boost::shared_ptr< ::rc_msgs::ActionCmdRequest const> ActionCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rc_msgs::ActionCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rc_msgs::ActionCmdRequest_<ContainerAllocator1> & lhs, const ::rc_msgs::ActionCmdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action_name == rhs.action_name &&
    lhs.updateX_enable == rhs.updateX_enable &&
    lhs.updateY_enable == rhs.updateY_enable &&
    lhs.updateYaw_enable == rhs.updateYaw_enable &&
    lhs.calibration_enable == rhs.calibration_enable &&
    lhs.reset_enable == rhs.reset_enable &&
    lhs.updateX_data == rhs.updateX_data &&
    lhs.updateY_data == rhs.updateY_data &&
    lhs.updateYaw_data == rhs.updateYaw_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rc_msgs::ActionCmdRequest_<ContainerAllocator1> & lhs, const ::rc_msgs::ActionCmdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4bd7dd5ffa8183aba2438b8b00b6371";
  }

  static const char* value(const ::rc_msgs::ActionCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4bd7dd5ffa8183aULL;
  static const uint64_t static_value2 = 0xba2438b8b00b6371ULL;
};

template<class ContainerAllocator>
struct DataType< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rc_msgs/ActionCmdRequest";
  }

  static const char* value(const ::rc_msgs::ActionCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action_name\n"
"bool updateX_enable\n"
"bool updateY_enable\n"
"bool updateYaw_enable\n"
"bool calibration_enable\n"
"bool reset_enable\n"
"float64 updateX_data\n"
"float64 updateY_data\n"
"float64 updateYaw_data\n"
;
  }

  static const char* value(const ::rc_msgs::ActionCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_name);
      stream.next(m.updateX_enable);
      stream.next(m.updateY_enable);
      stream.next(m.updateYaw_enable);
      stream.next(m.calibration_enable);
      stream.next(m.reset_enable);
      stream.next(m.updateX_data);
      stream.next(m.updateY_data);
      stream.next(m.updateYaw_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rc_msgs::ActionCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rc_msgs::ActionCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "action_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_name);
    s << indent << "updateX_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.updateX_enable);
    s << indent << "updateY_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.updateY_enable);
    s << indent << "updateYaw_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.updateYaw_enable);
    s << indent << "calibration_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.calibration_enable);
    s << indent << "reset_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_enable);
    s << indent << "updateX_data: ";
    Printer<double>::stream(s, indent + "  ", v.updateX_data);
    s << indent << "updateY_data: ";
    Printer<double>::stream(s, indent + "  ", v.updateY_data);
    s << indent << "updateYaw_data: ";
    Printer<double>::stream(s, indent + "  ", v.updateYaw_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RC_MSGS_MESSAGE_ACTIONCMDREQUEST_H
