// Generated by gencpp from file rc_msgs/ActionData.msg
// DO NOT EDIT!


#ifndef RC_MSGS_MESSAGE_ACTIONDATA_H
#define RC_MSGS_MESSAGE_ACTIONDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rc_msgs
{
template <class ContainerAllocator>
struct ActionData_
{
  typedef ActionData_<ContainerAllocator> Type;

  ActionData_()
    : header()
    , yaw_angle(0.0)
    , pitch_angle(0.0)
    , roll_angle(0.0)
    , pose_x(0.0)
    , pose_y(0.0)
    , yaw_acc(0.0)  {
    }
  ActionData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , yaw_angle(0.0)
    , pitch_angle(0.0)
    , roll_angle(0.0)
    , pose_x(0.0)
    , pose_y(0.0)
    , yaw_acc(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef double _pitch_angle_type;
  _pitch_angle_type pitch_angle;

   typedef double _roll_angle_type;
  _roll_angle_type roll_angle;

   typedef double _pose_x_type;
  _pose_x_type pose_x;

   typedef double _pose_y_type;
  _pose_y_type pose_y;

   typedef double _yaw_acc_type;
  _yaw_acc_type yaw_acc;





  typedef boost::shared_ptr< ::rc_msgs::ActionData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rc_msgs::ActionData_<ContainerAllocator> const> ConstPtr;

}; // struct ActionData_

typedef ::rc_msgs::ActionData_<std::allocator<void> > ActionData;

typedef boost::shared_ptr< ::rc_msgs::ActionData > ActionDataPtr;
typedef boost::shared_ptr< ::rc_msgs::ActionData const> ActionDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rc_msgs::ActionData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rc_msgs::ActionData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rc_msgs::ActionData_<ContainerAllocator1> & lhs, const ::rc_msgs::ActionData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.yaw_angle == rhs.yaw_angle &&
    lhs.pitch_angle == rhs.pitch_angle &&
    lhs.roll_angle == rhs.roll_angle &&
    lhs.pose_x == rhs.pose_x &&
    lhs.pose_y == rhs.pose_y &&
    lhs.yaw_acc == rhs.yaw_acc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rc_msgs::ActionData_<ContainerAllocator1> & lhs, const ::rc_msgs::ActionData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::ActionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc_msgs::ActionData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::ActionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_msgs::ActionData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::ActionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_msgs::ActionData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rc_msgs::ActionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32fe7d4a9580b9893db65b426aac33e3";
  }

  static const char* value(const ::rc_msgs::ActionData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32fe7d4a9580b989ULL;
  static const uint64_t static_value2 = 0x3db65b426aac33e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::rc_msgs::ActionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rc_msgs/ActionData";
  }

  static const char* value(const ::rc_msgs::ActionData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rc_msgs::ActionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float64 yaw_angle\n"
"float64 pitch_angle\n"
"float64 roll_angle\n"
"float64 pose_x\n"
"float64 pose_y\n"
"float64 yaw_acc\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::rc_msgs::ActionData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rc_msgs::ActionData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.yaw_angle);
      stream.next(m.pitch_angle);
      stream.next(m.roll_angle);
      stream.next(m.pose_x);
      stream.next(m.pose_y);
      stream.next(m.yaw_acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rc_msgs::ActionData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rc_msgs::ActionData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "yaw_angle: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "pitch_angle: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_angle);
    s << indent << "roll_angle: ";
    Printer<double>::stream(s, indent + "  ", v.roll_angle);
    s << indent << "pose_x: ";
    Printer<double>::stream(s, indent + "  ", v.pose_x);
    s << indent << "pose_y: ";
    Printer<double>::stream(s, indent + "  ", v.pose_y);
    s << indent << "yaw_acc: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RC_MSGS_MESSAGE_ACTIONDATA_H
